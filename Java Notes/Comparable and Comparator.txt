Comparable :
It is a interface.
Basically comparable is used for single sorting(Natural sorting) based on id.
create class implements comparable<T> and ovverrides compareTo() method.

Ex:
import java.util.*;

class Student implements Comparable<Student> {
    private int id;
    private String name;

    public Student(int id, String name) {
        this.id = id;
        this.name = name;
    }

    // Implementing compareTo method to sort by ID
    @Override
    public int compareTo(Student other) {
        return Integer.compare(this.id, other.id);
    }

    @Override
    public String toString() {
        return "Student{id=" + id + ", name='" + name + "'}";
    }
}

public class ComparableExample {
    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();
        students.add(new Student(3, "Alice"));
        students.add(new Student(1, "Bob"));
        students.add(new Student(2, "Charlie"));

        // Sorting based on compareTo (natural order - by ID)
        Collections.sort(students);

        System.out.println(students);
    }
}
Output:
Sorted by ID: [1 - Bob, 2 - Charlie, 3 - Alice]



Comparator:
It is a interface.
comparator is used for multiple sorting as like if you need sorting based on name,phone anthing else.
create class implements comparator<T> and ovverrides compare() method.

Ex:
import java.util.*;

class Student {
    int id;
    String name;

    public Student(int id, String name) {
        this.id = id;
        this.name = name;
    }

    @Override
    public String toString() {
        return id + " - " + name;
    }
}

// Comparator for sorting by Name
class NameComparator implements Comparator<Student> {
    @Override
    public int compare(Student s1, Student s2) {
        return s1.name.compareTo(s2.name); // Sort by Name
    }
}

public class ComparatorExample {
    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();
        students.add(new Student(3, "Alice"));
        students.add(new Student(1, "Bob"));
        students.add(new Student(2, "Charlie"));

        // Sorting by Name using Comparator
        Collections.sort(students, new NameComparator());

        System.out.println("Sorted by Name: " + students);
    }
}

Output:
Sorted by Name: [3 - Alice, 1 - Bob, 2 - Charlie]
