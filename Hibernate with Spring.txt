1. How to override the method in Implementation class?
=> @Autowired
   HibernateTemplate htemp;
   
   
2.How to perform operation in Hibernate?
=>      Configuration cfg = new Configuration().configure();
        
      1.  // Build session factory
        SessionFactory factory = cfg.buildSessionFactory();
        
     2.   // Open session
        Session session = factory.openSession();
        
        // Begin transaction
     3.   Transaction tx = session.beginTransaction();

        // Create user object
     4.  User user = new User();
        user.setName("Kaushik Prasad");
        user.setEmail("kaushik@gmail.com");

        // Save user object
     5.   session.save(user);

        // Commit transaction
     6.   tx.commit();

        // Close session and factory
     7.   session.close();
		
	 8.	factory.close();
	 
	 
3.How to configure Datasource using JDBC:
=> Inject in any Implementation class and override the methods.(@Autowired JdbcTemplate jtemp)
@Configuration
@ComponentScan(basePackages = "com.example")
public class JdbcConfig {

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        ds.setUrl("jdbc:mysql://localhost:3306/testdb");
        ds.setUsername("root");
        ds.setPassword("root");
        return ds;
    }

    @Bean
    public JdbcTemplate jdbcTemplate(DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}

4.How to configure Datasource using Hibernate:
=>Inject in any Implementation class and override the methods.(@Autowired HibernateTemplate htemp)
package com.example.config;

import org.hibernate.SessionFactory;
import org.springframework.context.annotation.*;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.*;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages = "com.example")
public class HibernateConfig {

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        ds.setUrl("jdbc:mysql://localhost:3306/testdb");
        ds.setUsername("root");
        ds.setPassword("root");
        return ds;
    }

    @Bean
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sf = new LocalSessionFactoryBean();
        sf.setDataSource(dataSource());
        sf.setPackagesToScan("com.example.entity");
        sf.setHibernateProperties(hibernateProperties());
        return sf;
    }

    private Properties hibernateProperties() {
        Properties props = new Properties();
        props.put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
        props.put("hibernate.show_sql", "true");
        props.put("hibernate.hbm2ddl.auto", "update");
        return props;
    }

    @Bean
    public HibernateTemplate hibernateTemplate(SessionFactory sessionFactory) {
        return new HibernateTemplate(sessionFactory);
    }

    @Bean
    public PlatformTransactionManager transactionManager(SessionFactory sf) {
        return new HibernateTransactionManager(sf);
    }

    @Bean
    public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
        return new PersistenceExceptionTranslationPostProcessor();
    }
}
5.How to perform operation in Jpa?
=>  // Step 1: Load persistence configuration
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("myJpaUnit");

        // Step 2: Create EntityManager
        EntityManager em = emf.createEntityManager();

        // Step 3: Begin transaction
        EntityTransaction tx = em.getTransaction();
        tx.begin();

        // Step 4: Create user object
        User user = new User();
        user.setName("Kaushik Prasad");
        user.setEmail("kaushik@gmail.com");

        // Step 5: Persist user
        em.persist(user);

        // Step 6: Commit transaction
        tx.commit();

        // Step 7: Close EntityManager
        em.close();

        // Step 8: Close EntityManagerFactory
        emf.close();


6.How to configure Datasource using Jpa:
=>Inject in any Implementation class and override the methods.(@Autowired HibernateTemplate htemp)
package com.example.config;

import org.springframework.context.annotation.*;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.*;
import org.springframework.orm.jpa.vendor.*;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages = "com.example")
public class JpaConfig {

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        ds.setUrl("jdbc:mysql://localhost:3306/testdb");
        ds.setUsername("root");
        ds.setPassword("root");
        return ds;
    }

    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource());
        em.setPackagesToScan("com.example.entity");

        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        em.setJpaVendorAdapter(vendorAdapter);
        em.setJpaProperties(jpaProperties());

        return em;
    }

    private Properties jpaProperties() {
        Properties props = new Properties();
        props.put("hibernate.hbm2ddl.auto", "update");
        props.put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
        props.put("hibernate.show_sql", "true");
        return props;
    }

    @Bean
    public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {
        JpaTransactionManager txnManager = new JpaTransactionManager();
        txnManager.setEntityManagerFactory(emf);
        return txnManager;
    }

    @Bean
    public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
        return new PersistenceExceptionTranslationPostProcessor();
    }
}


7.Spring Boot with Jpa?
=> Spring Boot will not Autoconfigure Hibernate related:
i.)SessionFactory
ii.) HibernateTemplate
iii.) HibernateTransaction

Spring Boot will Autoconfigure:
i.)EntityManagerFactory
ii.) JpaTransactionManager

8.Order of Bean Definition found.
1.)SessionFactory
ii).HibernateTemplate
iii).HibernateTransactionManager
iv).Datasource

9.Order of Bean Configuration?
i).Datasource 
ii.)SessionFactory
iii).HibernateTemplate
iv).HibernateTransactionManager




