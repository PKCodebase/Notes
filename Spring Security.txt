ЁЯФТ What is Session Management?

тЬЕ English:
Session management means keeping track of a user's activity while they are using your web application тАФ like whether they are logged in or not, who they are, etc.

тЬЕ Hindi:
Session management рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдЖрдкрдХреА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдпрд╣ рдпрд╛рдж рд░рдЦрддреА рд╣реИ рдХрд┐ рдХреМрди-рд╕рд╛ рдпреВрдЬрд╝рд░ рд▓реЙрдЧ рдЗрди рд╣реИ, рд╡рд╣ рдХреНрдпрд╛ рдХрд░ рд░рд╣рд╛ рд╣реИ, рдФрд░ рдХрд┐рддрдиреА рджреЗрд░ рд╕реЗ рдПрдХреНрдЯрд┐рд╡ рд╣реИред 	


Stateful (HttpSession):

The server remembers the user.

The session ID is stored on the server.

After logging in, the server keeps track of the user via a session ID.

Example: Traditional web applications, like banking websites.

Ex:

You log in to a website.

The server creates a session and sends a session ID in the response (stored in cookies).

On every request, the browser sends the session ID, and the server remembers you (no need to log in again).

Stateless (JWT):

The server does not remember the user.

The user sends a token (JWT) with every request, and the server validates the token.

Example: Modern REST APIs, where each request is independent and doesnтАЩt rely on server-side session storage.

@PostMapping("/login")
public String login(HttpSession session, String username, String password) {
    if (username.equals("user") && password.equals("password")) {
        session.setAttribute("username", username);
        return "Logged in successfully";
    }
    return "Invalid credentials";
}


Ex: 

You log in to a website.

The server generates a JWT token (which contains your user information, like username and expiration time).

The server sends this token back to you, and from then on, you send the token in every request to authenticate.

@PostMapping("/login")
public String login(@RequestBody User user) {
    if (user.getUsername().equals("user") && user.getPassword().equals("password")) {
        String token = jwtUtil.generateToken(user.getUsername());
        return token; // Send JWT token back to the user
    }
    return "Invalid credentials";
}


тЬЕ CSRF = Cross-Site Request Forgery
ЁЯФ╕ English Explanation:
CSRF is a security attack where a malicious website tricks a logged-in user into unknowingly sending requests to another website (where the user is already authenticated).

ЁЯза Example:
You are logged in to your bank website in one tab.

In another tab, you visit a malicious site.

That malicious site sends a request like:
POST /transfer?amount=1000&to=attacker
Your browser automatically includes your session cookies, so the bank thinks the request is valid!

тЮбя╕П The bank processes the request because it thinks it came from you.

ЁЯФ╕ Hindi Explanation:
CSRF рдПрдХ рд╕реБрд░рдХреНрд╖рд╛ рд╣рдорд▓рд╛ рд╣реИ рдЬрд┐рд╕рдореЗрдВ рдПрдХ рдзреЛрдЦреЗрдмрд╛рдЬ рд╡реЗрдмрд╕рд╛рдЗрдЯ, рдЖрдкрдХреЗ рдирд╛рдо рд╕реЗ рдПрдХ рд╡реИрдз рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрдмрд░рди request рднреЗрдЬрддреА рд╣реИ, рдЬрдмрдХрд┐ рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ login рд╣реЛрддреЗ рд╣реЛред

ЁЯза рдЙрджрд╛рд╣рд░рдг:
рдЖрдкрдиреЗ рдЕрдкрдиреА bank рдХреА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ login рдХрд┐рдпрд╛ рд╣реБрдЖ рд╣реИред

рдЖрдк рдХрд┐рд╕реА рджреВрд╕рд░реА рдлреЗрдХ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЬрд╛рддреЗ рд╣реЛред

рд╡реЛ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕реЗ bank рдХреЛ рдПрдХ рдЯреНрд░рд╛рдВрд╕рдлрд░ request рднреЗрдЬрддреА рд╣реИ, рдФрд░ рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХреЗ cookies рдХреЗ рдХрд╛рд░рдг рдмреИрдВрдХ рдХреЛ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рдпреЗ request рдЖрдкрдиреЗ рднреЗрдЬреА рд╣реИред

тЮбя╕П рдкреИрд╕рд╛ рдХрд┐рд╕реА рдЧрд▓рдд рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рдЪрд▓рд╛ рдЬрд╛рддрд╛ рд╣реИ тАФ рдмрд┐рдирд╛ рдЖрдкрдХреА рдорд░реНрдЬреА рдХреЗред


We disable CSRF in REST APIs because they donтАЩt use sessions or cookies for authentication тАФ they use tokens 
like JWT, which are not vulnerable to CSRF.

Authentication : veryfying the user identity.

Authorization : It gives the permissiom to access specific resource.

Filter : 